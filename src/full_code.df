PlayerEvent<"Join">()
    PlayerAction<"AdventureMode">();
    IfVar<"=">(GV(Player Count), 1)
    {
        CallFunction<"Constants">();
        CallFunction<"Setup">();
        StartProcess<"GameLoopH">()#TargetMode=WithNoTargets;
    }
    StartProcess<"PlayerLoopH">();
    CallFunction<"GoToSpawn">();
    SetVar<"=">(game:`%default passwordSubtitle`, "<gray>Input it by typing </gray><yellow>@password</yellow><gray> in chat.");
    Repeat<"Forever">()
    {
        PlayerAction<"SendTitle">("<gradient:red:#4488ff>Please enter password:", game:`%default passwordSubtitle`, 60, 0, 20);
        IfVar<"=">(game:`%default validPassword`, 1)
        {
            Control<"StopRepeat">();
        }
        Control<"Wait">();
    }
    PlayerAction<"SendTitle">("", 0, 0, 0);
    CallFunction<"GoToSpawn">();

--------------------------

PlayerEvent<"Command">()
    SetVar<"=">(local:`cmd`, GV(Event Command));
    IfVar<"=">(game:`%default validPassword`, 0)
    {
        IfGame<"CommandEquals">('1234')
        {
            SetVar<"=">(game:`%default validPassword`, 1);
        }
        Else
        {
            SetVar<"StyledText">(game:`%default passwordSubtitle`, "<red>Password "%var(cmd)" is incorrect.")#TextValueMerging=AddSpaces;
        }
        Control<"End">();
    }
    IfGame<"CommandEquals">('start')
    {
        CallFunction<"StartAIMatch">();
    }
    IfGame<"CommandEquals">('ab')
    {
        SetVar<"-">(game:`ActionBarOff`, 1, game:`ActionBarOff`);
    }

--------------------------

PlayerEvent<"RightClick | LS-CANCEL">()
    GameAction<"CancelEvent">();
    CallFunction<"1tProt">();
    IfVar<"= | NOT">(game:`%default mode`, 'Ingame')
    {
        Control<"End">();
    }
    SetVar<"Raycast">(line:`targetBlock`, GV(Eye Location), 150);
    SetVar<"AlignLoc">(line:`targetBlock`)#Rotation=RemoveRotation;
    SetVar<"=">(local:`ID`, game:`%default room`);
    CallFunction<"GetClickedThing">(local:`valid`, local:`isWall`, local:`tileX`, local:`tileZ`, local:`wallID`, line:`targetBlock`);
    SetVar<"GetCoord">(line:`boardY`, game:`%var(ID).Corner`)#Coordinate=Y;
    SetVar<"SetCoord">(local:`clickedBlock`, line:`targetBlock`, %math(%var(boardY) - 1))#Coordinate=Y;
    IfVar<"=">(game:`%var(ID).Status`, 'PlacingCores')
    {
        IfVar<"=">(local:`isWall`, 1)
        {
            PlayerAction<"SendMessage">("<red>» Error! </red><gray>You can't place cores on walls.");
            Control<"Return">();
        }
        IfVar<"=">(local:`valid`, 0)
        {
            PlayerAction<"SendMessage">("<red>» Error! </red><gray>You can't place a core here.");
            Control<"Return">();
        }
        IfPlayer<"IsHolding">(game:`%var(%default color)Core`)
        {
            CallFunction<"PlaceCore">(line:`success`, game:`%default color`, local:`tileX`, local:`tileZ`, 1);
            IfVar<"=">(line:`success`, 1)
            {
                PlayerAction<"RemoveItems">(game:`%var(%default color)Core`);
            }
        }
    }
    IfVar<"=">(game:`%var(ID).Turn`, game:`%default color`)
    {
        IfPlayer<"IsHolding">(game:`MoveItem`)#HandSlot=MainHand
        {
            CallFunction<"AttemptMove">();
        }
        IfPlayer<"IsHolding">(game:`WallItem`)#HandSlot=MainHand
        {
            CallFunction<"AttemptWallPlace">();
        }
        IfPlayer<"IsHolding">(game:`Scan5x5Item`)#HandSlot=MainHand
        {
            CallFunction<"Attempt5x5Scan">();
        }
        IfPlayer<"IsHolding">(game:`ScanZItem`)#HandSlot=MainHand
        {
            CallFunction<"AttemptZScan">();
        }
        IfPlayer<"IsHolding">(game:`ScanXItem`)#HandSlot=MainHand
        {
            CallFunction<"AttemptXScan">();
        }
        IfPlayer<"IsHolding">(game:`EndTurnItem`)#HandSlot=MainHand
        {
            CallFunction<"AttemptEndTurn">();
        }
        CallFunction<"TurnClick2">();
    }

--------------------------

PlayerEvent<"PlayerTakeDmg | LS-CANCEL">()
    GameAction<"CancelEvent">();

--------------------------

PlayerEvent<"DropItem | LS-CANCEL">()
    GameAction<"CancelEvent">();

--------------------------

PlayerEvent<"SwapHands | LS-CANCEL">()
    GameAction<"CancelEvent">();
    SetVar<"=">(game:`%var(%default room).Energy`, 6);

--------------------------

Function<"GoToSpawn">()
    PlayerAction<"Teleport">([93.5,51,6.5,0,-90]);
    IfVar<"=">(game:`%default validPassword`, 0)
    {
        SetVar<"=">(game:`%default mode`, 'Verification');
    }
    Else
    {
        SetVar<"=">(game:`%default mode`, 'Spawn');
        PlayerAction<"ClearInv">();
        PlayerAction<"SendTitle">("", 0);
        PlayerAction<"ActionBar">("");
        PlayerAction<"RemoveBossBar">();
        SetVar<"=">(game:`%default room`, 0);
        CallFunction<"MakeSpawnMenu">();
    }

--------------------------

Function<"Constants">()
    SetVar<"CreateList">(game:`rooms`, 'empty', 'empty', 'empty', 'empty', 'empty');
    SetVar<"=">(game:`RedCore`, item:red_stained_glass);
    SetVar<"=">(game:`BlueCore`, item:blue_stained_glass);
    SetVar<"=">(game:`RedOpposite`, 'Blue');
    SetVar<"=">(game:`BlueOpposite`, 'Red');
    SetVar<"=">(game:`RedColor`, "<#ee3020>");
    SetVar<"=">(game:`BlueColor`, "<#4488ff>");
    SetVar<"=">(game:`MidColor`, "<#bb4499>");
    SetVar<"=">(game:`RedParticle`, PFX{Dust|colorVariation=0|size=1|rgb=16729156|sizeVariation=0});
    SetVar<"=">(game:`BlueParticle`, PFX{Dust|colorVariation=0|size=1|rgb=26367|sizeVariation=0});
    SetVar<"=">(game:`RedPowder`, item:red_concrete_powder);
    SetVar<"=">(game:`BluePowder`, item:blue_concrete_powder);
    SetVar<"=">(game:`RedStartCoords`, '9|0');
    SetVar<"=">(game:`BlueStartCoords`, '0|9');
    SetVar<"=">(game:`EnergyColor`, "<#e0b0d0>");
    SetVar<"=">(game:`RedPieceBlock`, item:red_glazed_terracotta);
    SetVar<"=">(game:`BluePieceBlock`, item:blue_glazed_terracotta);
    SetVar<"=">(game:`MoveItem`, item:blaze_rod);
    SetVar<"=">(game:`WallItem`, item:polished_deepslate_wall);
    SetVar<"=">(game:`MoveCoreItem`, item:echo_shard);
    SetVar<"=">(game:`Scan5x5Item`, item:shulker_shell);
    SetVar<"=">(game:`ScanZItem`, item:gold_ingot);
    SetVar<"=">(game:`ScanXItem`, item:iron_ingot);
    SetVar<"=">(game:`EndTurnItem`, item:redstone);
    SetVar<"=">(game:`RedExplosionParticle`, PFX{100.0xItem|material=RED_GLAZED_TERRACOTTA|motionVariation=40|x=0|y=10|z=0});
    SetVar<"=">(game:`BlueExplosionParticle`, PFX{100.0xItem|material=BLUE_GLAZED_TERRACOTTA|motionVariation=40|x=0|y=10|z=0});
    SetVar<"=">(game:`RedFirework`, item:firework_rocket);
    SetVar<"=">(game:`BlueFirework`, item:firework_rocket);

--------------------------

Function<"FindRoom">(var: emptyIndex, var: cornerLoc, var: redSpawn, var: blueSpawn, var: verticalShift)
    SetVar<"GetValueIndex">(line:`emptyIndex`, game:`rooms`, 'empty');
    IfVar<"=">(line:`emptyIndex`, 0)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>All rooms are full. Please try again later.");
        PlayerAction<"PlaySound">(Sound{Shulker Hurt (Closed)});
        Control<"Return">();
    }
    SetVar<"=">(line:`verticalShift`, %math(%var(emptyIndex) - 1 * 39));
    SetVar<"ShiftOnAxis">(line:`cornerLoc`, [56.5,3.5,56.5], line:`verticalShift`)#Coordinate=Y;
    SetVar<"ShiftOnAxis">(line:`redSpawn`, [95.5,4,53.5,0,45], line:`verticalShift`)#Coordinate=Y;
    SetVar<"ShiftOnAxis">(line:`blueSpawn`, [53.5,4,95.5,0,-135], line:`verticalShift`)#Coordinate=Y;

--------------------------

Function<"StartRoom">(item:gold_block, num: IDNum, loc: corner, loc: redStart, loc: blueStart, str: redPlayer, str: bluePlayer, var: verticalShift)
    SetVar<"=">(local:`ID`, 'Room%var(IDNum)');
    SetVar<"SetListValue">(game:`rooms`, line:`IDNum`, 'full');
    SetVar<"=">(game:`%var(ID).Status`, 'Startup');
    SetVar<"=">(game:`%var(ID).RedPlayer`, line:`redPlayer`);
    SetVar<"=">(game:`%var(ID).BluePlayer`, line:`bluePlayer`);
    SetVar<"=">(game:`%var(ID).RedStart`, line:`redStart`);
    SetVar<"=">(game:`%var(ID).BlueStart`, line:`blueStart`);
    SetVar<"=">(game:`%var(ID).Corner`, line:`corner`);
    SetVar<"=">(game:`%var(ID).VerticalOffset`, line:`verticalShift`);
    SetVar<"=">(game:`%var(ID).MaxCores`, 3);
    SetVar<"CreateList">(game:`%var(ID).RedCores`);
    SetVar<"CreateList">(game:`%var(ID).BlueCores`);
    SetVar<"CreateDict">(game:`%var(ID).Walls`);
    SetVar<"=">(game:`%var(ID).InitialWallMax`, 4);
    SetVar<"=">(game:`%var(ID).InitialWallsPlaced`, 0);
    SetVar<"=">(game:`%var(ID).Energy`, 0);
    CallFunction<"PlayerEnter">('Red');
    CallFunction<"PlayerEnter">('Blue');
    GameAction<"CloneRegion">([50.5,41.5,0.5], [98.5,42.5,48.5], [56.5,42.5,6.5], game:`%var(ID).Corner`)#CloneBlockEntities=False;
    CallFunction<"TileToLocation">(line:`redPos`, game:`RedStartCoords`);
    GameAction<"SetBlock">(game:`RedPieceBlock`, line:`redPos`);
    CallFunction<"TileToLocation">(line:`bluePos`, game:`BlueStartCoords`);
    GameAction<"SetBlock">(game:`BluePieceBlock`, line:`bluePos`);
    SetVar<"=">(game:`%var(ID).RedPos`, game:`RedStartCoords`);
    SetVar<"=">(game:`%var(ID).BluePos`, game:`BlueStartCoords`);

--------------------------

Function<"RoomLoop">(num: IDNum)
    SetVar<"=">(local:`ID`, 'Room%var(IDNum)');
    IfVar<"=">(game:`%var(ID).Status`, 'Startup')
    {
        SetVar<"+=">(game:`%var(ID).LoopTick`);
        IfVar<"=">(game:`%var(ID).LoopTick`, 70)
        {
            SetVar<"=">(game:`%var(ID).Status`, 'PlacingCores');
            SetVar<"=">(game:`%var(ID).LoopTick`, 0);
            CallFunction<"CorePlaceStart">('Red');
            CallFunction<"CorePlaceStart">('Blue');
        }
    }
    IfVar<"=">(game:`%var(ID).Status`, 'PlacingCores')
    {
        SetVar<"+=">(game:`%var(ID).LoopTick`);
        CallFunction<"AllCoresPlaced">(line:`allCoresPlaced?`);
        IfVar<"=">(line:`allCoresPlaced?`, 1)
        {
            SetVar<"=">(game:`%var(ID).LoopTick`, 1200);
        }
        IfVar<"<">(game:`%var(ID).LoopTick`, 1200)
        {
            SetVar<"-">(line:`ticksLeft`, 1200, game:`%var(ID).LoopTick`);
            SetVar<"/">(line:`seconds`, line:`ticksLeft`, 20)#DivisionMode=FloorResult;
            SetVar<"+=">(line:`seconds`);
            SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
            PlayerAction<"SetBossBar">("<#bb4499>Placing Cores <dark_gray>|</dark_gray> <#cc66aa>%var(seconds)s</#cc66aa> left!", line:`ticksLeft`, 1200);
            IfVar<"=">(%math(%var(ticksLeft) % 20), 0)
            {
                PlayerAction<"PlayEntitySound">(Sound{Cherry Wood Button Click On|p=2|vol=0.7}, '%selected');
            }
            SelectObject<"Reset">();
        }
        Else
        {
            IfVar<"=">(line:`allCoresPlaced?`, 1)
            {
                CallFunction<"EndCorePhase">();
            }
            Else
            {
                SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
                PlayerAction<"SendMessage">("<red>» </red><gray>Not all cores were placed in time! Game ended.");
                PlayerAction<"PlayEntitySound">(Sound{Respawn Anchor Deplete|p=0.5}, '%selected');
                SelectObject<"Reset">();
                CallFunction<"CloseRoom">(local:`ID`);
                Control<"End">();
            }
        }
    }
    CallFunction<"RoomLoop2">();

--------------------------

Function<"StartAIMatch">()
    CallFunction<"FindRoom">(line:`roomNumber`, line:`corner`, line:`redSpawn`, line:`blueSpawn`, line:`verticalShift`);
    PlayerAction<"SendMessage">("<dark_gray>» </dark_gray><gray>Found a match in Room %var(roomNumber)");
    IfVar<"=">(line:`roomNumber`, 0)
    {
        Control<"Return">();
    }
    IfVar<"=">(%random(0,1), 0)
    {
        CallFunction<"StartRoom">(line:`roomNumber`, line:`corner`, line:`redSpawn`, line:`blueSpawn`, '%default', 'AI', line:`verticalShift`);
    }
    Else
    {
        CallFunction<"StartRoom">(line:`roomNumber`, line:`corner`, line:`redSpawn`, line:`blueSpawn`, 'AI', '%default', line:`verticalShift`);
    }

--------------------------

Function<"PlayerEnter">(str: color)
    SelectObject<"PlayerName">(game:`%var(ID).%var(color)Player`);
    SetVar<"=">(game:`%selected mode`, 'Ingame');
    SetVar<"=">(game:`%default room`, local:`ID`);
    SetVar<"=">(game:`%default color`, line:`color`);
    PlayerAction<"Teleport">(game:`%var(ID).%var(color)Start`);
    PlayerAction<"SetAllowFlight">();
    PlayerAction<"SetFlying">();
    PlayerAction<"SetSpeed">(100)#SpeedType=Both;
    SetVar<"StyledText">(line:`vsText`, "<gray>vs.<space>", game:`%var(%var(color)Opposite)Color`, game:`%var(ID).%var(%var(color)Opposite)Player`);
    PlayerAction<"SendTitle">("<gradient:red:blue>⏴ ᴄᴏʀᴇ ʜᴜɴᴛ ⏵", line:`vsText`);
    PlayerAction<"PlayEntitySound">(Sound{Ender Dragon (Note Block)|p=2|vol=0.5}, '%selected');
    CallFunction<"ClearGrid">();
    SelectObject<"Reset">();

--------------------------

Function<"CorePlaceStart">(str: color)
    IfVar<"=">(game:`%var(ID).%var(color)Player`, 'AI')
    {
        CallFunction<"AI.CorePlace">(line:`color`);
    }
    SelectObject<"PlayerName">(game:`%var(ID).%var(color)Player`);
    PlayerAction<"PlaySound">(Sound{Experience Orb Pickup});
    SetVar<"SetItemAmount">(line:`itemstack`, game:`%var(color)Core`, game:`%var(ID).MaxCores`);
    PlayerAction<"GiveItems">(line:`itemstack`);
    SetVar<"StyledText">(line:`title`, game:`MidColor`, "Place your Cores!");
    PlayerAction<"SendTitle">(line:`title`, "<gray>Right click while holding them!", 60, 5);
    SelectObject<"Reset">();

--------------------------

Function<"AI.CorePlace">(str: color)
    Repeat<"Multiple">(game:`%var(ID).MaxCores`)
    {
        SetVar<"=">(line:`distanceThreshold`, 8);
        Repeat<"Forever">()
        {
            SetVar<"=">(line:`x`, %random(0,9));
            SetVar<"=">(line:`z`, %random(0,9));
            SetVar<"=">(line:`pos`, '%var(x)|%var(z)');
            IfVar<"ListContains">(game:`%var(ID).%var(color)Cores`, line:`pos`)
            {
                Control<"Skip">();
            }
            SetVar<"=">(line:`minDistance`, 100);
            Repeat<"ForEach">(line:`core`, game:`%var(ID).%var(color)Cores`)
            {
                CallFunction<"TileDistance">(line:`dist`, line:`pos`, line:`core`);
                SetVar<"MinNumber">(line:`minDistance`, line:`minDistance`, line:`dist`);
            }
            IfVar<"<=">(line:`minDistance`, line:`distanceThreshold`)
            {
                SetVar<"-=">(line:`distanceThreshold`, 0.5);
                Control<"Skip">();
            }
            CallFunction<"TileDistance">(line:`spawnDist`, line:`pos`, game:`%var(%var(color)Opposite)StartCoords`);
            IfVar<"<=">(line:`spawnDist`, 1)
            {
                Control<"Skip">();
            }
            CallFunction<"PlaceCore">(line:`success`, line:`color`, line:`x`, line:`z`, 1);
            IfVar<"=">(line:`success`, 1)
            {
                Control<"StopRepeat">();
            }
        }
    }

--------------------------

Function<"AllCoresPlaced">(var: allCoresPlaced?)
    SetVar<"=">(line:`allCoresPlaced?`, 0);
    SetVar<"ListLength">(line:`red`, game:`%var(ID).RedCores`);
    SetVar<"ListLength">(line:`blue`, game:`%var(ID).BlueCores`);
    IfVar<"=">(line:`red`, game:`%var(ID).MaxCores`)
    {
        IfVar<"=">(line:`blue`, game:`%var(ID).MaxCores`)
        {
            SetVar<"=">(line:`allCoresPlaced?`, 1);
        }
    }

--------------------------

Function<"GetClickedThing">(item:diamond_block, var: valid?, var: isWall?, var: tileX, var: tileZ, var: wallID, loc: loc)
    SetVar<"VectorBetween">(line:`vec`, game:`%var(ID).Corner`, line:`loc`);
    SetVar<"SetVectorComp">(line:`vec`, 0)#Component=Y;
    SetVar<"AddVectors">(line:`vec`, line:`vec`, 〈1,0,1〉);
    SetVar<"GetVectorComp">(line:`x`, line:`vec`);
    SetVar<"GetVectorComp">(line:`z`, line:`vec`)#Component=Z;
    CallFunction<"InBoundsRaw">(line:`valid?`, line:`x`, line:`z`);
    IfVar<"=">(line:`valid?`, 0)
    {
        Control<"Return">();
    }
    SetVar<"/">(line:`divided`, line:`vec`, 〈4,1,4〉)#DivisionMode=FloorResult;
    SetVar<"GetVectorComp">(line:`tileX`, line:`divided`);
    SetVar<"GetVectorComp">(line:`tileZ`, line:`divided`)#Component=Z;
    IfVar<"=">(3, %math(%var(x) % 4), %math(%var(z) % 4))
    {
        SetVar<"=">(line:`isWall?`, 1);
        SetVar<"=">(line:`xMod`, %math(%var(x) % 4));
        SetVar<"=">(line:`zMod`, %math(%var(z) % 4));
        SetVar<"GetVectorComp">(line:`xDiv`, line:`divided`);
        SetVar<"GetVectorComp">(line:`zDiv`, line:`divided`)#Component=Z;
        IfVar<"=">(line:`xMod`, line:`zMod`)
        {
            SetVar<"=">(line:`valid?`, 0);
            Control<"Return">();
        }
        IfVar<">">(line:`xMod`, line:`zMod`)
        {
            SetVar<"String">(line:`wallID`, '%var(xDiv)|%var(zDiv):', %math(%var(xDiv) + 1), '|%var(zDiv)');
        }
        Else
        {
            SetVar<"String">(line:`wallID`, '%var(xDiv)|%var(zDiv):%var(xDiv)|', %math(%var(zDiv) + 1));
        }
    }
    Else
    {
        SetVar<"=">(line:`isWall?`, 0);
    }

--------------------------

Function<"ManhattanDist">(item:rail, var: dist, num: x1, num: z1, num: x2, num: z2)
    SetVar<"AbsoluteValue">(line:`x`, %math(%var(x1) - %var(x2)));
    SetVar<"AbsoluteValue">(line:`z`, %math(%var(z1) - %var(z2)));
    SetVar<"+">(line:`dist`, line:`x`, line:`z`);

--------------------------

Function<"PlaceCore">(item:magenta_stained_glass, var: success?, str: color, num: x, num: z, num: isInitialPlacement)
    SetVar<"=">(line:`success?`, 0);
    SetVar<"ListLength">(line:`alreadyPlaced`, game:`%var(ID).%var(color)Cores`);
    IfVar<">=">(line:`alreadyPlaced`, game:`%var(ID).MaxCores`)
    {
        SelectObject<"PlayerName">(game:`%var(ID).%var(color)Player`);
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You have already placed the maximum number of cores.")@AllPlayers;
        SelectObject<"Reset">();
        Control<"Return">();
    }
    IfVar<"ListContains">(game:`%var(ID).%var(color)Cores`, '%var(x)|%var(z)')
    {
        SelectObject<"PlayerName">(game:`%var(ID).%var(color)Player`);
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>There is already a core here.")@AllPlayers;
        SelectObject<"Reset">();
        Control<"Return">();
    }
    IfVar<"=">(line:`isInitialPlacement`, 1)
    {
        IfVar<"=">('%var(x)|%var(z)', '0|9', '9|0')
        {
            SelectObject<"PlayerName">(game:`%var(ID).%var(color)Player`);
            PlayerAction<"SendMessage">("<red>» Error! </red><gray>You cannot place a core on a starting position.")@AllPlayers;
            SelectObject<"Reset">();
            Control<"Return">();
        }
    }
    SetVar<"AppendValue">(game:`%var(ID).%var(color)Cores`, '%var(x)|%var(z)');
    SetVar<"=">(line:`success?`, 1);

--------------------------

Function<"TileToLocation">(item:map, var: tileCenter, str: tileID)
    SetVar<"SplitString">(line:`split`, line:`tileID`, '|');
    SetVar<"ShiftAllAxes">(line:`tileCenter`, game:`%var(ID).Corner`, %math(%index(split,1) * 4), 0, %math(%index(split,2) * 4));

--------------------------

Function<"ClearGrid">()
    SetVar<"ShiftAllAxes">(line:`c1`, game:`%var(ID).Corner`, -2, -1, -2);
    SetVar<"ShiftAllAxes">(line:`c2`, game:`%var(ID).Corner`, 37, -1, 3);
    Repeat<"Multiple">(13)
    {
        PlayerAction<"ClearDispBlock">(line:`c1`, line:`c2`);
        SetVar<"ShiftOnAxis">(line:`c1`, 3)#Coordinate=Z;
        SetVar<"ShiftOnAxis">(line:`c2`, 3)#Coordinate=Z;
    }

--------------------------

Function<"RoomLoop2">()
    IfVar<"=">(game:`%var(ID).Status`, 'PlacingWalls')
    {
        SetVar<"+=">(game:`%var(ID).LoopTick`);
        IfVar<"<">(game:`%var(ID).LoopTick`, 300)
        {
            CallFunction<"InitWallTick">(game:`%var(ID).Turn`);
            SetVar<"-">(line:`ticksLeft`, 300, game:`%var(ID).LoopTick`);
            SetVar<"/">(line:`seconds`, line:`ticksLeft`, 20)#DivisionMode=FloorResult;
            SetVar<"+=">(line:`seconds`);
            SetVar<"StyledText">(line:`actionBar`, game:`%var(%var(ID).Turn)Color`, "%var(%var(ID).%var(%var(ID).Turn)Player) <gray>is Placing");
            SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
            PlayerAction<"SetBossBar">("<#bb4499>Placing Walls <dark_gray>|</dark_gray> <#cc66aa>%var(seconds)s</#cc66aa> left | <#cc66aa>%var(%var(ID).InitialWallsPlaced)</#cc66aa>/<#cc66aa>%var(%var(ID).InitialWallMax)</#cc66aa> Walls Placed", line:`ticksLeft`, 300);
            PlayerAction<"ActionBar">(line:`actionBar`);
            SelectObject<"Reset">();
        }
        Else
        {
            CallFunction<"ChangeWallTurn">();
        }
    }
    IfVar<"=">(game:`%var(ID).Status`, 'FirstTurnStart')
    {
        SetVar<"+=">(game:`%var(ID).LoopTick`);
        IfVar<"=">(game:`%var(ID).LoopTick`, 1)
        {
            SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
            PlayerAction<"SetBossBar">("", 100, 100);
            PlayerAction<"PlayEntitySound">('%selected', Sound{Trident Riptide (II)|p=1.5});
            PlayerAction<"SendTitle">("<gradient:red:blue>⏴ Start! ⏵", 60, 5);
            PlayerAction<"ClearInv">();
            PlayerAction<"SetHotbar">(game:`MoveItem`, game:`WallItem`, game:`MoveCoreItem`, game:`Scan5x5Item`, game:`ScanZItem`, game:`ScanXItem`, game:`EndTurnItem`);
            SelectObject<"Reset">();
        }
        IfVar<"=">(game:`%var(ID).LoopTick`, 60)
        {
            SetVar<"=">(game:`%var(ID).LoopTick`, 0);
            SetVar<"=">(game:`%var(ID).Status`, 'TurnStart');
        }
    }
    IfVar<"=">(game:`%var(ID).Status`, 'TurnStart')
    {
        SetVar<"RandomNumber">(game:`%var(ID).Energy`, 1, 6);
        SetVar<"StyledText">(line:`energyText`, game:`EnergyColor`, "%var(%var(ID).Energy)⚡");
        SetVar<"StyledText">(line:`turnText`, game:`%var(%var(ID).Turn)Color`, "%var(%var(ID).%var(%var(ID).Turn)Player)'s <gray>Turn");
        SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
        PlayerAction<"SendTitle">(line:`energyText`, line:`turnText`, 40, 5, 15);
        PlayerAction<"PlayEntitySound">('%selected', Sound{Experience Orb Pickup|p=0.5|vol=0.8});
        SelectObject<"Reset">();
        SetVar<"=">(game:`%var(ID).Status`, 'Turn');
        SetVar<"=">(game:`%var(ID).LoopTick`, 0);
    }
    CallFunction<"RoomLoop3">();

--------------------------

Function<"AI.WallPlace">(str: color)
    Repeat<"Forever">()
    {
        SetVar<"RandomValue">(line:`strategy`, 'Random', 'Connect');
        SetVar<"=">(line:`wall`, 0);
        CallFunction<"AI.Wall.%var(strategy)">(line:`wall`);
        IfVar<"=">(line:`wall`, 0)
        {
            Control<"Skip">();
        }
        SetVar<"SplitString">(line:`tiles`, line:`wall`, ':');
        SetVar<"=">(line:`tile1`, '%index(tiles,1)');
        SetVar<"=">(line:`tile2`, '%index(tiles,2)');
        IfVar<"DictHasKey">(game:`%var(ID).Walls`, '%var(tile1):%var(tile2)', '%var(tile2):%var(tile1)')
        {
            Control<"Skip">();
        }
        CallFunction<"CheckWallValid">(line:`isValid`, line:`wall`);
        IfVar<"=">(line:`isValid`, 0)
        {
            Control<"Skip">();
        }
        CallFunction<"TileToLocation">(line:`loc1`, line:`tile1`);
        CallFunction<"TileToLocation">(line:`loc2`, line:`tile2`);
        SetVar<"GetCenterLoc">(line:`loc`, line:`loc1`, line:`loc2`);
        CallFunction<"PlaceWall">(line:`wall`, line:`loc`);
        Control<"StopRepeat">();
    }

--------------------------

Function<"CheckWallValid">(var: isValid, str: wall)
    SetVar<"=">(line:`isValid`, 0);
    SetVar<"=">(line:`wallsToVerify`, game:`%var(ID).Walls`);
    SetVar<"SetDictValue">(line:`wallsToVerify`, line:`wall`, 0);
    SetVar<"CreateList">(line:`queue`, '0|0');
    SetVar<"CreateDict">(line:`visited`);
    Repeat<"Forever">()
    {
        SetVar<"ListLength">(line:`len`, line:`queue`);
        IfVar<"=">(line:`len`, 0)
        {
            Control<"StopRepeat">();
        }
        SetVar<"PopListValue">(line:`tile`, line:`queue`, 1);
        IfVar<"DictHasKey">(line:`visited`, line:`tile`)
        {
            Control<"Skip">();
        }
        SetVar<"SetDictValue">(line:`visited`, line:`tile`, 0);
        CallFunction<"GetNeighbors">(line:`neighbors`, line:`tile`);
        Repeat<"ForEach">(line:`neighbor`, line:`neighbors`)
        {
            IfVar<"DictHasKey">(line:`visited`, line:`neighbor`)
            {
                Control<"Skip">();
            }
            IfVar<"DictHasKey | NOT">(line:`wallsToVerify`, '%var(tile):%var(neighbor)')
            {
                IfVar<"DictHasKey | NOT">(line:`wallsToVerify`, '%var(neighbor):%var(tile)')
                {
                    SetVar<"AppendValue">(line:`queue`, line:`neighbor`);
                }
            }
        }
    }
    SetVar<"GetDictSize">(line:`len`, line:`visited`);
    IfVar<"=">(line:`len`, 100)
    {
        SetVar<"=">(line:`isValid`, 1);
    }

--------------------------

Function<"GetNeighbors">(item:player_head, var: neighbors, str: tile)
    SetVar<"CreateList">(line:`neighbors`);
    CallFunction<"TileToCoords">(line:`x`, line:`z`, line:`tile`);
    CallFunction<"CheckNeighbor">(line:`neighbors`, %math(%var(x) + 1), line:`z`);
    CallFunction<"CheckNeighbor">(line:`neighbors`, %math(%var(x) - 1), line:`z`);
    CallFunction<"CheckNeighbor">(line:`neighbors`, line:`x`, %math(%var(z) + 1));
    CallFunction<"CheckNeighbor">(line:`neighbors`, line:`x`, %math(%var(z) - 1));

--------------------------

Function<"MakeSpawnMenu">(str: playerName)
    SelectObject<"EntitiesCond | HasCustomTag">('%default spawn_menu');
    EntityAction<"Remove">();
    SelectObject<"Reset">();
    Repeat<"Forever">()
    {
        IfGame<"IsChunkLoaded">([93.5,51.5,6.5])
        {
            Control<"StopRepeat">();
        }
        Control<"Wait">(2);
    }
    SetVar<"=">(line:`lineLoc`, [96.5,53.5,6.5]);
    SetVar<"CreateList">(line:`lines`, "<gradient:red:blue>⏴ ᴄᴏʀᴇ ʜᴜɴᴛ ⏵", "» Play", "» Credits");
    Repeat<"ForEach">(line:`text`, line:`lines`)
    {
        GameAction<"SpawnTextDisplay">(line:`lineLoc`, line:`text`);
        EntityAction<"SetCustomTag">('%default spawn_menu');
        SetVar<"ShiftOnAxis">(line:`lineLoc`, -0.5)#Coordinate=Y;
    }

--------------------------

Function<"AttemptWallPlace">()
    IfVar<"=">(0, local:`isWall`, local:`valid`)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may only place walls on wall spots.");
        Control<"Return">();
    }
    CallFunction<"CheckWallValid">(line:`nonBlockingWall`, local:`wallID`);
    IfVar<"=">(line:`nonBlockingWall`, 0)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>Walls may not make areas inaccessible.");
        Control<"Return">();
    }
    IfVar<"DictHasKey">(game:`%var(ID).Walls`, local:`wallID`)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>There is already a wall here.");
        Control<"Return">();
    }
    IfVar<"!=">(game:`%var(ID).Status`, 'PlacingWalls')
    {
        IfVar<">=">(game:`%var(ID).Energy`, 2)
        {
            SetVar<"-=">(game:`%var(ID).Energy`, 2);
        }
        Else
        {
            PlayerAction<"SendMessage">("<red>» Error! </red><gray>Not enough energy. (Needs <#cc66aa>2⚡</#cc66aa>)");
            Control<"Return">();
        }
    }
    CallFunction<"PlaceWall">(local:`wallID`, local:`clickedBlock`);

--------------------------

Function<"EndCorePhase">()
    SetVar<"=">(game:`%var(ID).Status`, 'PlacingWalls');
    SetVar<"=">(game:`%var(ID).LoopTick`, 0);
    SetVar<"RandomValue">(game:`%var(ID).Turn`, 'Red', 'Blue');
    SetVar<"=">(game:`%var(ID).IsInitialWallTurn`, 1);
    SetVar<"StyledText">(line:`turnText`, game:`%var(%var(ID).Turn)Color`, "%var(%var(ID).%var(%var(ID).Turn)Player)'s <gray>Turn");
    SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
    PlayerAction<"SendTitle">("<#bb4499>Place %var(%var(ID).InitialWallMax) Walls!", line:`turnText`, 40, 0, 20);
    PlayerAction<"PlaySound">(Sound{Experience Orb Pickup});
    PlayerAction<"ClearInv">();
    PlayerAction<"GiveItems">(game:`WallItem`);
    SelectObject<"Reset">();

--------------------------

Function<"InitWallTick">(str: color)
    IfVar<"=">(game:`%var(ID).%var(color)Player`, 'AI')
    {
        IfVar<"=">(game:`%var(ID).IsInitialWallTurn`, 1)
        {
            IfVar<">=">(game:`%var(ID).LoopTick`, 60)
            {
                CallFunction<"AI.WallPlace">(line:`color`);
            }
        }
        Else
        {
            IfVar<">=">(game:`%var(ID).LoopTick`, 30)
            {
                CallFunction<"AI.WallPlace">(line:`color`);
            }
        }
    }

--------------------------

Function<"CloseRoom">(item:dark_oak_door, str: roomID)
    SelectObject<"PlayerName">(game:`%var(roomID).RedPlayer`, game:`%var(roomID).BluePlayer`);
    PlayerAction<"PlayEntitySound">('%selected', Sound{Loom Take Result|p=1.5});
    SelectObject<"Reset">();
    SetVar<"TrimList">(line:`roomIndex`, line:`roomID`, 5, 5);
    SetVar<"ParseNumber">(line:`roomIndex`, line:`roomIndex`);
    SetVar<"SetListValue">(game:`rooms`, line:`roomIndex`, 'empty');
    SelectObject<"PlayerName">(game:`%var(roomID).RedPlayer`, game:`%var(roomID).BluePlayer`);
    StartProcess<"GoToSpawnUtil">()#TargetMode=ForEachInSelection;
    SelectObject<"Reset">();
    SetVar<"PurgeVars">('%var(roomID).')#MatchRequirement=AnyPartOfName;

--------------------------

Function<"IngameLoop">()
    SetVar<"=">(local:`ID`, game:`%default room`);
    PlayerAction<"RemovePotion">(Pot{Jump Boost -100 for ∞});
    PlayerAction<"SetFoodLevel">(20);
    PlayerAction<"SetSpeed">(100)#SpeedType=Both;
    Repeat<"ForEach">(line:`core`, game:`%var(ID).%var(%default color)Cores`)
    {
        CallFunction<"TileToLocation">(line:`center`, line:`core`);
        SetVar<"ShiftAllAxes">(line:`c1`, line:`center`, 1, -1, 1);
        SetVar<"ShiftAllAxes">(line:`c2`, line:`center`, -1, -1, -1);
        PlayerAction<"DisplayBlock">(line:`c1`, line:`c2`, game:`%var(%default color)Powder`);
    }
    Repeat<"ForEach">(line:`core`, game:`%var(ID).%var(%var(%default color)Opposite)Cores`)
    {
        CallFunction<"TileToLocation">(line:`center`, line:`core`);
        SetVar<"ShiftAllAxes">(line:`c1`, line:`center`, 1, -1, 1);
        SetVar<"ShiftAllAxes">(line:`c2`, line:`center`, -1, -1, -1);
        PlayerAction<"DisplayBlock">(line:`c1`, line:`c2`, game:`%var(%var(%default color)Opposite)Powder`);
    }

--------------------------

Function<"WallToTileCoords">(var: x1, var: z1, var: x2, var: z2, str: wall)
    SetVar<"ReplaceString">(line:`parsed`, line:`wall`, ':', '|');
    SetVar<"SplitString">(line:`parsed`, line:`parsed`, '|');
    SetVar<"=">(line:`x1`, %index(parsed,1));
    SetVar<"=">(line:`z1`, %index(parsed,2));
    SetVar<"=">(line:`x2`, %index(parsed,3));
    SetVar<"=">(line:`z2`, %index(parsed,4));

--------------------------

Function<"PlaceWall">(item:prismarine_wall, str: wallID, loc: wallLoc)
    SetVar<"SetDictValue">(game:`%var(ID).Walls`, line:`wallID`, 0);
    CallFunction<"GetWallCorners">(line:`wallLoc`, line:`c1`, line:`c2`);
    Repeat<"Grid">(line:`lightLoc`, line:`c1`, line:`c2`)
    {
        IfGame<"BlockEquals">(line:`lightLoc`, 'air')
        {
            GameAction<"SetBlock">(line:`lightLoc`, item:light);
        }
    }
    SetVar<"ShiftOnAxis">(line:`c1`, -1)#Coordinate=Y;
    SetVar<"ShiftOnAxis">(line:`c2`, -1)#Coordinate=Y;
    GameAction<"SetRegion">(line:`c1`, line:`c2`, item:lime_stained_glass);
    IfVar<"=">(game:`%var(ID).Status`, 'PlacingWalls')
    {
        SetVar<"+=">(game:`%var(ID).InitialWallsPlaced`);
        CallFunction<"ChangeWallTurn">(1);
    }
    SetVar<"ShiftAllAxes">(line:`c1`, -0.5, 0.5, -0.5);
    SetVar<"ShiftAllAxes">(line:`c2`, 0.5, 0.5, 0.5);
    SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
    PlayerAction<"ParticleCuboid">(line:`c1`, line:`c2`, PFX{Firework|motionVariation=100|x=1|y=0|z=0});
    PlayerAction<"PlayEntitySound">(Sound{Beacon Activate|p=2|vol=0.7}, Sound{Deepslate Tiles Place|p=0.7|vol=1}, '%selected');
    SelectObject<"Reset">();

--------------------------

Function<"WallToLoc">(var: location, str: wall)
    SetVar<"TrimString">(line:`tile1`, line:`wall`, 1, 3);
    SetVar<"TrimString">(line:`tile2`, line:`wall`, 5, 7);
    CallFunction<"TileToLocation">(line:`loc1`, line:`tile1`);
    CallFunction<"TileToLocation">(line:`loc2`, line:`tile2`);
    SetVar<"GetCenterLoc">(line:`location`, line:`loc1`, line:`loc2`);

--------------------------

Function<"InBoundsRaw">(var: result, num: x, num: z)
    SetVar<"=">(line:`result`, 0);
    IfVar<"InRange | NOT">(line:`x`, 0, 38)
    {
        Control<"Return">();
    }
    IfVar<"InRange | NOT">(line:`z`, 0, 38)
    {
        Control<"Return">();
    }
    SetVar<"=">(line:`result`, 1);

--------------------------

Function<"AI.Wall.Connect">(var: wall)
    SetVar<"GetDictSize">(line:`size`, game:`%var(ID).Walls`);
    IfVar<"=">(line:`size`, 0)
    {
        CallFunction<"AI.Wall.Random">(line:`wall`);
        Control<"Return">();
    }
    SetVar<"GetDictKeys">(line:`placedWalls`, game:`%var(ID).Walls`);
    SetVar<"RandomValue">(line:`adjWall`, line:`placedWalls`);
    CallFunction<"GetAdjWalls">(line:`adjWalls`, line:`adjWall`);
    SetVar<"RandomValue">(line:`wall`, line:`adjWalls`);

--------------------------

Function<"AI.Wall.Random">(var: wall)
    SetVar<"=">(line:`x`, %random(0,9));
    SetVar<"=">(line:`z`, %random(0,9));
    SetVar<"=">(line:`tile1`, '%var(x)|%var(z)');
    CallFunction<"GetNeighbors">(line:`neighbors`, line:`tile1`);
    SetVar<"RandomValue">(line:`tile2`, line:`neighbors`);
    CallFunction<"MakeSortedWall">(line:`wall`, line:`tile1`, line:`tile2`);

--------------------------

Function<"GetAdjWalls">(item:red_sandstone_wall, var: neighbors, str: wall)
    SetVar<"CreateList">(line:`neighbors`);
    CallFunction<"WallToTileCoords">(line:`x1`, line:`z1`, line:`x2`, line:`z2`, line:`wall`);
    IfVar<"=">(line:`x1`, line:`x2`)
    {
        SetVar<"MinNumber">(line:`zMin`, line:`z1`, line:`z2`);
        SetVar<"MaxNumber">(line:`zMax`, line:`z1`, line:`z2`);
        SetVar<"String">(line:`wall1`, line:`x1`, '|', line:`zMin`, ':', %math(%var(x1) + 1), '|', line:`zMin`);
        SetVar<"String">(line:`wall2`, line:`x1`, '|', line:`zMax`, ':', %math(%var(x1) + 1), '|', line:`zMax`);
        SetVar<"String">(line:`wall3`, %math(%var(x1) - 1), '|', line:`zMin`, ':', line:`x1`, '|', line:`zMin`);
        SetVar<"String">(line:`wall4`, %math(%var(x1) - 1), '|', line:`zMax`, ':', line:`x1`, '|', line:`zMax`);
        SetVar<"String">(line:`wall5`, %math(%var(x1) + 1), '|', line:`zMin`, ':', %math(%var(x1) + 1), '|', line:`zMax`);
        SetVar<"String">(line:`wall6`, %math(%var(x1) - 1), '|', line:`zMin`, ':', %math(%var(x1) - 1), '|', line:`zMax`);
    }
    Else
    {
        SetVar<"MinNumber">(line:`xMin`, line:`x1`, line:`x2`);
        SetVar<"MaxNumber">(line:`xMax`, line:`x1`, line:`x2`);
        SetVar<"String">(line:`wall1`, line:`xMin`, '|', line:`z1`, ':', line:`xMin`, '|', %math(%var(z1) + 1));
        SetVar<"String">(line:`wall2`, line:`xMax`, '|', line:`z1`, ':', line:`xMax`, '|', %math(%var(z1) + 1));
        SetVar<"String">(line:`wall3`, line:`xMin`, '|', %math(%var(z1) - 1), ':', line:`xMin`, '|', line:`z1`);
        SetVar<"String">(line:`wall4`, line:`xMax`, '|', %math(%var(z1) - 1), ':', line:`xMax`, '|', line:`z1`);
        SetVar<"String">(line:`wall5`, line:`xMin`, '|', %math(%var(z1) - 1), ':', line:`xMax`, '|', %math(%var(z1) - 1));
        SetVar<"String">(line:`wall6`, line:`xMin`, '|', %math(%var(z1) + 1), ':', line:`xMax`, '|', %math(%var(z1) + 1));
    }
    SetVar<"CreateList">(line:`wallsToCheck`, line:`wall1`, line:`wall2`, line:`wall3`, line:`wall4`, line:`wall5`, line:`wall6`);
    Repeat<"ForEach">(line:`toCheck`, line:`wallsToCheck`)
    {
        CallFunction<"IsWallInBounds">(line:`inBounds`, line:`toCheck`);
        IfVar<"=">(line:`inBounds`, 1)
        {
            SetVar<"AppendValue">(line:`neighbors`, line:`toCheck`);
        }
    }

--------------------------

Function<"CheckNeighbor">(var: list, num: x, num: z)
    IfVar<"InRange">(line:`x`, 0, 9)
    {
        IfVar<"InRange">(line:`z`, 0, 9)
        {
            SetVar<"AppendValue">(line:`list`, '%var(x)|%var(z)');
        }
    }

--------------------------

Function<"MakeSortedWall">(var: wall, str: tile1, str: tile2)
    CallFunction<"TileToCoords">(line:`x1`, line:`z1`, line:`tile1`);
    CallFunction<"TileToCoords">(line:`x2`, line:`z2`, line:`tile2`);
    IfVar<"=">(line:`x1`, line:`x2`)
    {
        SetVar<"MinNumber">(line:`min`, line:`z1`, line:`z2`);
        SetVar<"MaxNumber">(line:`max`, line:`z1`, line:`z2`);
        SetVar<"=">(line:`wall`, '%var(x1)|%var(min):%var(x2)|%var(max)');
    }
    Else
    {
        SetVar<"MinNumber">(line:`min`, line:`x1`, line:`x2`);
        SetVar<"MaxNumber">(line:`max`, line:`x1`, line:`x2`);
        SetVar<"=">(line:`wall`, '%var(min)|%var(z1):%var(max)|%var(z2)');
    }

--------------------------

Function<"ChangeWallTurn">(num*: successful = 0)
    SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
    IfVar<"=">(line:`successful`, 0)
    {
        SetVar<"StyledText">(line:`timeOutMessage`, "<#cc66dd>» Time's Up!<space>", game:`%var(%var(ID).Turn)Color`, game:`%var(ID).%var(%var(ID).Turn)Player`, "<space><gray>didn't place a wall in time! Skipping turn.");
        PlayerAction<"SendMessage">(line:`timeOutMessage`);
        PlayerAction<"PlayEntitySound">(Sound{Bass|p=1.5|vol=1}, '%selected');
    }
    SelectObject<"Reset">();
    SetVar<"=">(game:`%var(ID).LoopTick`, 0);
    SetVar<"=">(game:`%var(ID).IsInitialWallTurn`, 0);
    IfVar<"=">(game:`%var(ID).InitialWallsPlaced`, game:`%var(ID).InitialWallMax`)
    {
        SetVar<"=">(game:`%var(ID).Status`, 'FirstTurnStart');
    }
    Else
    {
        SetVar<"=">(game:`%var(ID).Turn`, game:`%var(%var(ID).Turn)Opposite`);
    }

--------------------------

Function<"RoomLoop3">()
    IfVar<"=">(game:`%var(ID).Status`, 'Turn')
    {
        SetVar<"+=">(game:`%var(ID).LoopTick`);
        IfVar<"=">(game:`%var(ID).LoopTick`, 1)
        {
            IfVar<"=">(game:`%var(ID).%var(%var(ID).Turn)Player`, 'AI')
            {
                SetVar<"=">(game:`%var(ID).LoopTick`, 1160);
            }
        }
        IfVar<"=">(game:`%var(ID).Energy`, 0)
        {
            IfVar<"<">(game:`%var(ID).LoopTick`, 1100)
            {
                SetVar<"=">(game:`%var(ID).LoopTick`, 1100);
            }
        }
        IfVar<"<=">(game:`%var(ID).LoopTick`, 1200)
        {
            SetVar<"-">(line:`ticksLeft`, 1200, game:`%var(ID).LoopTick`);
            SetVar<"/">(line:`seconds`, line:`ticksLeft`, 20)#DivisionMode=FloorResult;
            SetVar<"+=">(line:`seconds`, 1);
            SetVar<"ListLength">(line:`redRemaining`, game:`%var(ID).RedCores`);
            SetVar<"ListLength">(line:`blueRemaining`, game:`%var(ID).BlueCores`);
            SetVar<"StyledText">(line:`bossBarText`, game:`%var(%var(ID).Turn)Color`, "%var(%var(ID).%var(%var(ID).Turn)Player)'s <gray>Turn | Remaining Cores:<space>", game:`RedColor`, line:`redRemaining`, "<gray>-", game:`BlueColor`, line:`blueRemaining`, "<space><gray>|<space>", game:`MidColor`, line:`seconds`, "s <gray>left.");
            CallFunction<"CheckWin">();
            SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
            PlayerAction<"SetBossBar">(line:`bossBarText`, line:`ticksLeft`, 1200);
            IfVar<"=">(game:`ActionBarOff`, 0)
            {
                PlayerAction<"ActionBar">("<#cc66aa>⏴ <#dd88cc>Energy: <#e0b0d0>%var(%var(ID).Energy)⚡ <#cc66aa>⏵");
            }
            SelectObject<"Reset">();
        }
        Else
        {
            SetVar<"StyledText">(line:`timeUpMessage`, "<#cc66dd>» Time's Up!<space>", game:`%var(%var(ID).Turn)Color`, game:`%var(ID).%var(%var(ID).Turn)Player`, "'s<gray> turn is over! Switching turns.");
            SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
            PlayerAction<"SendMessage">(line:`timeUpMessage`);
            PlayerAction<"PlayEntitySound">('%selected', Sound{Bass|p=1.7});
            SelectObject<"Reset">();
            CallFunction<"EndTurn">();
        }
    }
    CallFunction<"RoomLoop4">();

--------------------------

Function<"EndTurn">()
    SetVar<"=">(game:`%var(ID).Turn`, game:`%var(%var(ID).Turn)Opposite`);
    SetVar<"=">(game:`%var(ID).Status`, 'TurnStart');
    SetVar<"=">(game:`%var(ID).MovingCore`, 0);

--------------------------

Function<"IsInBounds">(var: result, num: x, num: z)
    SetVar<"=">(line:`result`, 0);
    IfVar<"InRange | NOT">(line:`x`, 0, 9)
    {
        Control<"Return">();
    }
    IfVar<"InRange | NOT">(line:`z`, 0, 9)
    {
        Control<"Return">();
    }
    SetVar<"=">(line:`result`, 1);

--------------------------

Function<"HeldItemLoop">()
    SetVar<"ShiftOnAxis">(local:`blockHit`, -0.5)#Coordinate=Y;
    SetVar<"=">(local:`currentTile`, game:`%var(ID).%var(%default color)Pos`);
    IfPlayer<"IsHolding">(game:`MoveItem`)#HandSlot=MainHand
    {
        CallFunction<"GetNeighbors">(line:`neighbors`, local:`currentTile`);
        Repeat<"ForEach">(line:`neighbor`, line:`neighbors`)
        {
            IfVar<"DictHasKey | NOT">(game:`%var(ID).Walls`, '%var(currentTile):%var(neighbor)')
            {
                IfVar<"DictHasKey | NOT">(game:`%var(ID).Walls`, '%var(neighbor):%var(currentTile)')
                {
                    CallFunction<"TileToLocation">(line:`loc`, line:`neighbor`);
                    SetVar<"ShiftAllAxes">(line:`c1`, line:`loc`, -1.5, -0.5, -1.5);
                    SetVar<"ShiftAllAxes">(line:`c2`, line:`loc`, 1.5, -0.5, 1.5);
                    IfGame<"BlockEquals">(local:`blockHit`, item:gray_concrete_powder)
                    {
                        CallFunction<"GetClickedThing">(line:`valid`, line:`isWall`, line:`x`, line:`z`, line:`ignore`, local:`blockHit`);
                        IfVar<"=">(line:`valid`, 1)
                        {
                            IfVar<"=">(line:`isWall`, 0)
                            {
                                IfVar<"=">('%var(x)|%var(z)', line:`neighbor`)
                                {
                                    PlayerAction<"ParticleCuboid">(line:`c1`, line:`c2`, PFX{Composter});
                                    Control<"Skip">();
                                }
                            }
                        }
                    }
                    PlayerAction<"ParticleCuboid">(line:`c1`, line:`c2`, PFX{Electric Spark|motionVariation=100|x=1|y=0|z=0});
                }
            }
        }
    }
    IfPlayer<"IsHolding">(game:`WallItem`)#HandSlot=MainHand
    {
        IfGame<"BlockEquals">(local:`blockHit`, item:light_gray_concrete_powder)
        {
            CallFunction<"GetWallCorners">(local:`blockHit`, line:`c1`, line:`c2`);
            SetVar<"ShiftAllAxes">(line:`c1`, -0.5, -0.5, -0.5);
            SetVar<"ShiftAllAxes">(line:`c2`, 0.5, -0.5, 0.5);
            PlayerAction<"ParticleCuboid">(line:`c1`, line:`c2`, PFX{Falling Dust|material=WHITE_CONCRETE});
        }
    }
    IfPlayer<"IsHolding">(game:`Scan5x5Item`)#HandSlot=MainHand
    {
        CallFunction<"TileToLocation">(line:`loc`, local:`currentTile`);
        SetVar<"ShiftAllAxes">(line:`c1`, line:`loc`, -9.5, -0.5, -9.5);
        SetVar<"ShiftAllAxes">(line:`c2`, line:`loc`, 9.5, -0.5, 9.5);
        PlayerAction<"ParticleCuboid">(line:`c1`, line:`c2`, 1, PFX{Electric Spark|motionVariation=100|x=1|y=0|z=0})#FillType=Hollow;
    }
    CallFunction<"HeldItemLoop2">();

--------------------------

Function<"IsWallInBounds">(var: inBounds, str: wall)
    SetVar<"=">(line:`inBounds`, 0);
    CallFunction<"WallToTileCoords">(line:`x1`, line:`z1`, line:`x2`, line:`z2`, line:`wall`);
    CallFunction<"IsInBounds">(line:`inBounds1`, line:`x1`, line:`z1`);
    CallFunction<"IsInBounds">(line:`inBounds2`, line:`x2`, line:`z2`);
    IfVar<"=">(0, line:`inBounds1`, line:`inBounds2`)
    {
        Control<"Return">();
    }
    SetVar<"=">(line:`inBounds`, 1);

--------------------------

Function<"PlaceGhostWall">(item:prismarine_wall, str: wallID, loc: wallLoc, item*: block = item:lime_stained_glass)
    SetVar<"SetDictValue">(game:`%var(ID).Walls`, line:`wallID`, 0);
    CallFunction<"GetWallCorners">(line:`wallLoc`, line:`c1`, line:`c2`);
    Repeat<"Grid">(line:`lightLoc`, line:`c1`, line:`c2`)
    {
        IfGame<"BlockEquals">(line:`lightLoc`, 'air')
        {
            PlayerAction<"DisplayBlock">(line:`lightLoc`, item:light)@AllPlayers;
        }
    }
    SetVar<"ShiftOnAxis">(line:`c1`, -1)#Coordinate=Y;
    SetVar<"ShiftOnAxis">(line:`c2`, -1)#Coordinate=Y;
    PlayerAction<"DisplayBlock">(line:`c1`, line:`c2`, line:`block`)@AllPlayers;

--------------------------

Function<"AttemptMove">()
    IfVar<"=">(local:`valid`, 0)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may only move to normal tiles.");
        Control<"Return">();
    }
    IfVar<"=">(local:`isWall`, 1)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may only move to normal tiles.");
        Control<"Return">();
    }
    IfVar<"<">(game:`%var(ID).Energy`, 1)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>Not enough energy. (Needs <#cc66aa>1⚡</#cc66aa>)");
        Control<"Return">();
    }
    SetVar<"=">(line:`moveToPos`, '%var(tileX)|%var(tileZ)');
    CallFunction<"GetNeighbors">(line:`neighbors`, line:`moveToPos`);
    SetVar<"=">(line:`currentPos`, game:`%var(ID).%var(%default color)Pos`);
    IfVar<"ListContains | NOT">(line:`neighbors`, line:`currentPos`)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may only move to adjacent tiles.");
        Control<"Return">();
    }
    IfVar<"DictHasKey">(game:`%var(ID).Walls`, '%var(moveToPos):%var(currentPos)')
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may not move through walls!");
        Control<"Return">();
    }
    IfVar<"DictHasKey">(game:`%var(ID).Walls`, '%var(currentPos):%var(moveToPos)')
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may not move through walls!");
        Control<"Return">();
    }
    SetVar<"-=">(game:`%var(ID).Energy`);
    CallFunction<"MovePiece">(line:`currentPos`, line:`moveToPos`);

--------------------------

Function<"MovePiece">(item:blaze_rod, str: currentPos, str: moveToPos)
    CallFunction<"TileToLocation">(line:`currentLoc`, line:`currentPos`);
    CallFunction<"TileToLocation">(line:`newLoc`, line:`moveToPos`);
    IfGame<"BlockEquals">(line:`currentLoc`, item:amethyst_block)
    {
        GameAction<"BreakBlock">(line:`currentLoc`);
        GameAction<"SetBlock">(line:`currentLoc`, game:`%var(%var(%default color)Opposite)PieceBlock`);
    }
    Else
    {
        GameAction<"BreakBlock">(line:`currentLoc`);
    }
    IfGame<"BlockEquals">(line:`newLoc`, game:`%var(%var(%default color)Opposite)PieceBlock`)
    {
        GameAction<"SetBlock">(line:`newLoc`, item:amethyst_block);
    }
    Else
    {
        GameAction<"SetBlock">(line:`newLoc`, game:`%var(%default color)PieceBlock`);
    }
    SetVar<"=">(game:`%var(ID).%var(%default color)Pos`, line:`moveToPos`);
    SetVar<"=">(line:`oppColor`, game:`%var(%var(ID).Turn)Opposite`);
    SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
    IfVar<"ListContains">(game:`%var(ID).%var(oppColor)Cores`, line:`moveToPos`)
    {
        SetVar<"RemoveListValue">(game:`%var(ID).%var(oppColor)Cores`, line:`moveToPos`);
        SetVar<"ListLength">(line:`remaining`, game:`%var(ID).%var(oppColor)Cores`);
        SetVar<"StyledText">(line:`coreFoundText`, game:`%var(oppColor)Color`, "%var(oppColor) Core Found!");
        PlayerAction<"SendTitle">(line:`coreFoundText`, "<#e0b0d0>%var(remaining) <gray>remain.", 40, 5, 15);
        PlayerAction<"Particle">(line:`newLoc`, PFX{20.0xCloud|motionVariation=50|x=0|y=5|z=0}, game:`%var(oppColor)ExplosionParticle`);
        PlayerAction<"PlayEntitySound">('%selected', Sound{Beacon Deactivate|p=1.2}, Sound{Explode});
        CallFunction<"ClearGrid">();
    }
    PlayerAction<"PlayEntitySound">(Sound{Goat Step}, '%selected');
    SelectObject<"Reset">();
    CallFunction<"CheckWin">();

--------------------------

Function<"Get5x5">(var: region, num: centerX, num: centerZ)
    SetVar<"CreateList">(line:`region`);
    SetVar<"SetAllCoords">(line:`c1`, -2, 0, -2);
    SetVar<"SetAllCoords">(line:`c2`, 2, 0, 2);
    Repeat<"Grid">(line:`gridLoc`, line:`c1`, line:`c2`)
    {
        SetVar<"AlignLoc">(line:`gridLoc`)#Rotation=RemoveRotation#AlignmentMode=LowerBlockCorner;
        SetVar<"GetCoord">(line:`x`, line:`gridLoc`);
        SetVar<"GetCoord">(line:`z`, line:`gridLoc`)#Coordinate=Z;
        SetVar<"+=">(line:`x`, line:`centerX`);
        SetVar<"+=">(line:`z`, line:`centerZ`);
        SetVar<"AppendValue">(line:`region`, '%var(x)|%var(z)');
    }

--------------------------

Function<"GetWallCorners">(loc: wallLoc, var: corner1, var: corner2)
    SetVar<"AlignLoc">(line:`wallLoc`)#Rotation=RemoveRotation;
    SetVar<"VectorBetween">(line:`vec`, game:`%var(ID).Corner`, line:`wallLoc`);
    SetVar<"AddVectors">(line:`vec`, line:`vec`, 〈1,0,1〉);
    SetVar<"GetVectorComp">(line:`x`, line:`vec`);
    SetVar<"GetVectorComp">(line:`z`, line:`vec`)#Component=Z;
    SetVar<"RoundNumber">(line:`divX`, line:`x`, 4)#RoundMode=Floor;
    SetVar<"RoundNumber">(line:`divZ`, line:`z`, 4)#RoundMode=Floor;
    IfVar<"=">(%math(%var(x) % 4), 3)
    {
        SetVar<"SetAllCoords">(line:`corner1`, line:`x`, 0, %math(%var(divZ)-1));
        SetVar<"SetAllCoords">(line:`corner2`, line:`x`, 0, %math(%var(divZ)+3));
    }
    Else
    {
        SetVar<"SetAllCoords">(line:`corner1`, %math(%var(divX)-1), 0, line:`z`);
        SetVar<"SetAllCoords">(line:`corner2`, %math(%var(divX)+3), 0, line:`z`);
    }
    SetVar<"+">(line:`corner1`, line:`corner1`, game:`%var(ID).Corner`, [-1,0,-1]);
    SetVar<"+">(line:`corner2`, line:`corner2`, game:`%var(ID).Corner`, [-1,0,-1]);

--------------------------

Function<"TileToCoords">(item:slime_ball, var: x, var: z, str: tileID)
    SetVar<"TrimString">(line:`x`, line:`tileID`, 1, 1);
    SetVar<"ParseNumber">(line:`x`);
    SetVar<"TrimString">(line:`z`, line:`tileID`, 3, 3);
    SetVar<"ParseNumber">(line:`z`);

--------------------------

Function<"TileDistance">(item:detector_rail, var: dist, str: tile1, str: tile2)
    CallFunction<"TileToCoords">(line:`x1`, line:`z1`, line:`tile1`);
    CallFunction<"TileToCoords">(line:`x2`, line:`z2`, line:`tile2`);
    CallFunction<"ManhattanDist">(line:`dist`, line:`x1`, line:`z1`, line:`x2`, line:`z2`);

--------------------------

Function<"1tProt">()
    IfPlayer<"NoItemCooldown | NOT">(item:dead_tube_coral)
    {
        Control<"End">();
    }
    PlayerAction<"SetItemCooldown">(item:dead_tube_coral, 1);

--------------------------

Function<"Attempt5x5Scan">()
    CallFunction<"TileToCoords">(line:`x`, line:`z`, game:`%var(ID).%var(%var(ID).Turn)Pos`);
    CallFunction<"Get5x5">(line:`region`, line:`x`, line:`z`);
    CallFunction<"AttemptScan">(line:`region`);

--------------------------

Function<"HeldItemLoop2">()
    IfPlayer<"IsHolding">(game:`ScanZItem`)#HandSlot=MainHand
    {
        CallFunction<"GetBlockZ">(line:`z`, line:`zMod`, local:`blockHit`);
        IfVar<"InRange | NOT">(line:`z`, 0, 9)
        {
            Control<"Return">();
        }
        IfVar<"!=">(line:`zMod`, 3)
        {
            CallFunction<"TileToLocation">(line:`c1`, '0|%var(z)');
            CallFunction<"TileToLocation">(line:`c2`, '9|%var(z)');
            SetVar<"ShiftAllAxes">(line:`c1`, -1.5, -0.5, -1.5);
            SetVar<"ShiftAllAxes">(line:`c2`, 1.5, -0.5, 1.5);
            PlayerAction<"ParticleCuboid">(line:`c1`, line:`c2`, 1, PFX{Electric Spark|motionVariation=100|x=1|y=0|z=0})#FillType=Hollow;
        }
    }
    IfPlayer<"IsHolding">(game:`ScanXItem`)#HandSlot=MainHand
    {
        CallFunction<"GetBlockX">(line:`x`, line:`xMod`, local:`blockHit`);
        IfVar<"InRange | NOT">(line:`x`, 0, 9)
        {
            Control<"Return">();
        }
        IfVar<"!=">(line:`xMod`, 3)
        {
            CallFunction<"TileToLocation">(line:`c1`, '%var(x)|0');
            CallFunction<"TileToLocation">(line:`c2`, '%var(x)|9');
            SetVar<"ShiftAllAxes">(line:`c1`, -1.5, -0.5, -1.5);
            SetVar<"ShiftAllAxes">(line:`c2`, 1.5, -0.5, 1.5);
            PlayerAction<"ParticleCuboid">(line:`c1`, line:`c2`, 1, PFX{Electric Spark|motionVariation=100|x=1|y=0|z=0})#FillType=Hollow;
        }
    }
    IfVar<"=">(game:`%var(ID).Turn`, game:`%default color`)
    {
        IfPlayer<"IsHolding">(game:`MoveCoreItem`)#HandSlot=MainHand
        {
            CallFunction<"MoveCoreLoop">();
        }
        Else
        {
            SetVar<"=">(game:`%var(ID).MovingCore`, 0);
        }
    }

--------------------------

Function<"GetXLine">(var: region, num: x)
    SetVar<"CreateList">(line:`region`, '%var(x)|0', '%var(x)|1', '%var(x)|2', '%var(x)|3', '%var(x)|4', '%var(x)|5', '%var(x)|6', '%var(x)|7', '%var(x)|8', '%var(x)|9');

--------------------------

Function<"GetZLine">(var: region, num: z)
    SetVar<"CreateList">(line:`region`, '0|%var(z)', '1|%var(z)', '2|%var(z)', '3|%var(z)', '4|%var(z)', '5|%var(z)', '6|%var(z)', '7|%var(z)', '8|%var(z)', '9|%var(z)');

--------------------------

Function<"AttemptZScan">()
    CallFunction<"GetBlockZ">(line:`z`, line:`zMod`, local:`clickedBlock`);
    IfVar<"InRange | NOT">(line:`z`, 0, 9)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You must be looking at a valid row.");
        Control<"Return">();
    }
    IfVar<"=">(line:`zMod`, 3)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You must be looking at a valid row.");
        Control<"Return">();
    }
    CallFunction<"GetZLine">(line:`region`, line:`z`);
    CallFunction<"AttemptScan">(line:`region`);

--------------------------

Function<"AttemptXScan">()
    CallFunction<"GetBlockX">(line:`x`, line:`xMod`, local:`clickedBlock`);
    IfVar<"InRange | NOT">(line:`x`, 0, 9)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You must be looking at a valid column.");
        Control<"Return">();
    }
    IfVar<"=">(line:`xMod`, 3)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You must be looking at a valid column.");
        Control<"Return">();
    }
    CallFunction<"GetXLine">(line:`region`, line:`x`);
    CallFunction<"AttemptScan">(line:`region`);

--------------------------

Function<"AttemptEndTurn">()
    SetVar<"StyledText">(line:`message`, "<#cc66dd>»<space>", game:`%var(%var(ID).Turn)Color`, "%default <gray>ended their turn. Switching turns.");
    SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
    PlayerAction<"SendMessage">(line:`message`);
    PlayerAction<"PlayEntitySound">('%selected', Sound{Book Page Turn|p=1.5}, Sound{Cartography Table Take Result});
    SelectObject<"Reset">();
    CallFunction<"EndTurn">();

--------------------------

Function<"GetBlockZ">(var: z, var: zMod, loc: block)
    SetVar<"AlignLoc">(line:`adjustedLoc`, line:`block`)#Rotation=RemoveRotation;
    SetVar<"-">(line:`adjustedLoc`, line:`adjustedLoc`, game:`%var(ID).Corner`, [0,0,-1]);
    SetVar<"GetCoord">(line:`targetZ`, line:`adjustedLoc`)#Coordinate=Z;
    SetVar<"/">(line:`z`, line:`targetZ`, 4)#DivisionMode=FloorResult;
    SetVar<"%">(line:`zMod`, line:`targetZ`, 4)#RemainderMode=Modulo;

--------------------------

Function<"GetBlockX">(var: x, var: xMod, loc: block)
    SetVar<"AlignLoc">(line:`adjustedLoc`, line:`block`)#Rotation=RemoveRotation;
    SetVar<"-">(line:`adjustedLoc`, line:`adjustedLoc`, game:`%var(ID).Corner`, [-1,0,0]);
    SetVar<"GetCoord">(line:`targetX`, line:`adjustedLoc`);
    SetVar<"/">(line:`x`, line:`targetX`, 4)#DivisionMode=FloorResult;
    SetVar<"%">(line:`xMod`, line:`targetX`, 4)#RemainderMode=Modulo;

--------------------------

Function<"TurnClick2">()
    IfPlayer<"IsHolding">(game:`MoveCoreItem`)#HandSlot=MainHand
    {
        IfVar<"=">(game:`%var(ID).MovingCore`, 0)
        {
            CallFunction<"AttemptCoreClick">();
        }
        Else
        {
            CallFunction<"AttemptCoreMove">();
        }
    }

--------------------------

Function<"MoveCoreLoop">()
    SetVar<"=">(line:`allPlayerCores`, game:`%var(ID).%var(%default color)Cores`);
    IfVar<"!=">(game:`%var(ID).MovingCore`, 0)
    {
        SetVar<"GetListValue">(line:`movingCoreTile`, line:`allPlayerCores`, game:`%var(ID).MovingCore`);
        CallFunction<"GetCoreMoves">(line:`neighbors`, line:`movingCoreTile`, game:`%default color`);
        Repeat<"ForEach">(line:`neighbor`, line:`neighbors`)
        {
            CallFunction<"TileToLocation">(line:`loc`, line:`neighbor`);
            SetVar<"ShiftAllAxes">(line:`c1`, line:`loc`, -1.5, -0.5, -1.5);
            SetVar<"ShiftAllAxes">(line:`c2`, line:`loc`, 1.5, -0.5, 1.5);
            IfGame<"BlockEquals">(local:`blockHit`, item:gray_concrete_powder)
            {
                CallFunction<"GetClickedThing">(line:`valid`, line:`isWall`, line:`x`, line:`z`, line:`ignore`, local:`blockHit`);
                IfVar<"=">(line:`valid`, 1)
                {
                    IfVar<"=">(line:`isWall`, 0)
                    {
                        IfVar<"=">('%var(x)|%var(z)', line:`neighbor`)
                        {
                            PlayerAction<"ParticleCuboid">(line:`c1`, line:`c2`, PFX{Composter});
                            Control<"Skip">();
                        }
                    }
                }
            }
            PlayerAction<"ParticleCuboid">(line:`c1`, line:`c2`, PFX{Electric Spark|motionVariation=100|x=1|y=0|z=0});
        }
    }
    Else
    {
        Repeat<"ForEach">(line:`core`, line:`allPlayerCores`)
        {
            CallFunction<"GetCoreMoves">(line:`moves`, line:`core`, game:`%default color`);
            SetVar<"ListLength">(line:`moveCount`, line:`moves`);
            IfVar<">">(line:`moveCount`, 0)
            {
                CallFunction<"TileToLocation">(line:`loc`, line:`core`);
                SetVar<"ShiftAllAxes">(line:`c1`, line:`loc`, -1.5, -0.5, -1.5);
                SetVar<"ShiftAllAxes">(line:`c2`, line:`loc`, 1.5, -0.5, 1.5);
                PlayerAction<"ParticleCuboid">(line:`c1`, line:`c2`, PFX{Electric Spark|motionVariation=100|x=1|y=0|z=0});
            }
        }
    }

--------------------------

Function<"AttemptScan">(list: region)
    IfVar<">=">(game:`%var(ID).Energy`, 3)
    {
        SetVar<"-=">(game:`%var(ID).Energy`, 3);
    }
    Else
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>Not enough energy. (Needs <#cc66aa>3⚡</#cc66aa>)");
        Control<"Return">();
    }
    SetVar<"=">(line:`oppCores`, game:`%var(ID).%var(%var(%var(ID).Turn)Opposite)Cores`);
    SetVar<"=">(line:`total`, 0);
    Repeat<"ForEach">(line:`tile`, line:`region`)
    {
        IfVar<"ListContains">(line:`oppCores`, line:`tile`)
        {
            SetVar<"+=">(line:`total`);
        }
    }
    SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
    IfVar<"=">(line:`total`, 1)
    {
        PlayerAction<"SendMessage">("<#cc66aa>» <gray>Found <#cc66aa>%var(total)</#cc66aa> core in the area!");
    }
    Else
    {
        PlayerAction<"SendMessage">("<#cc66aa>» <gray>Found <#cc66aa>%var(total)</#cc66aa> cores in the area!");
    }
    PlayerAction<"PlayEntitySound">(Sound{Beacon Power Select#power3|p=1.498}, Sound{Beacon Power Select#power3|p=2}, '%selected');
    SelectObject<"Reset">();

--------------------------

Function<"AttemptCoreMove">()
    IfVar<"=">(local:`valid`, 0)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may only move to empty tiles.");
        Control<"Return">();
    }
    IfVar<"=">(local:`isWall`, 1)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may only move to empty tiles.");
        Control<"Return">();
    }
    IfVar<"ListContains">(game:`%var(ID).%var(%default color)Cores`, '%var(tileX)|%var(tileZ)')
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may only move to empty tiles.");
        Control<"Return">();
    }
    IfVar<"<">(game:`%var(ID).Energy`, 3)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>Not enough energy. (Needs <#cc66aa>3⚡</#cc66aa>)");
        Control<"Return">();
    }
    SetVar<"GetListValue">(line:`corePos`, game:`%var(ID).%var(%default color)Cores`, game:`%var(ID).MovingCore`);
    SetVar<"=">(line:`moveToPos`, '%var(tileX)|%var(tileZ)');
    CallFunction<"GetCoreMoves">(line:`neighbors`, line:`corePos`, game:`%default color`);
    IfVar<"DictHasKey">(game:`%var(ID).Walls`, '%var(moveToPos):%var(corePos)')
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may not move through walls!");
        Control<"Return">();
    }
    IfVar<"DictHasKey">(game:`%var(ID).Walls`, '%var(corePos):%var(moveToPos)')
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may not move through walls!");
        Control<"Return">();
    }
    IfVar<"=">(game:`%var(ID).%var(%var(%default color)Opposite)Pos`, line:`moveToPos`)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may not move onto the enemy.");
        Control<"Return">();
    }
    IfVar<"ListContains | NOT">(line:`neighbors`, line:`moveToPos`)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You may only move to adjacent tiles.");
        Control<"Return">();
    }
    SetVar<"-=">(game:`%var(ID).Energy`, 3);
    CallFunction<"MoveCore">(line:`corePos`, line:`moveToPos`);

--------------------------

Function<"GetNeighborsWall">(var: neighbors, str: tile)
    CallFunction<"GetNeighbors">(line:`allNeighbors`, line:`tile`);
    SetVar<"CreateList">(line:`neighbors`);
    Repeat<"ForEach">(line:`neighbor`, line:`allNeighbors`)
    {
        IfVar<"DictHasKey | NOT">(game:`%var(ID).Walls`, '%var(neighbor):%var(tile)')
        {
            IfVar<"DictHasKey | NOT">(game:`%var(ID).Walls`, '%var(tile):%var(neighbor)')
            {
                SetVar<"AppendValue">(line:`neighbors`, line:`neighbor`);
            }
        }
    }

--------------------------

Function<"GetCoreMoves">(var: moves, str: core, str: color)
    CallFunction<"GetNeighborsWall">(line:`neighbors`, line:`core`);
    SetVar<"CreateList">(line:`moves`);
    Repeat<"ForEach">(line:`move`, line:`neighbors`)
    {
        IfVar<"ListContains | NOT">(game:`%var(ID).%var(color)Cores`, line:`move`)
        {
            IfVar<"!=">(line:`move`, game:`%var(ID).%var(%var(color)Opposite)Pos`)
            {
                SetVar<"AppendValue">(line:`moves`, line:`move`);
            }
        }
    }

--------------------------

Function<"MoveCore">(item:blaze_rod, str: currentPos, str: moveToPos)
    SetVar<"SetListValue">(game:`%var(ID).%var(%var(ID).Turn)Cores`, game:`%var(ID).MovingCore`, line:`moveToPos`);
    CallFunction<"TileToLocation">(line:`currentLoc`, line:`currentPos`);
    SetVar<"ShiftAllAxes">(line:`c1`, line:`currentLoc`, -1, -1, -1);
    SetVar<"ShiftAllAxes">(line:`c2`, line:`currentLoc`, 1, -1, 1);
    PlayerAction<"ClearDispBlock">(line:`c1`, line:`c2`);
    CallFunction<"TileToLocation">(line:`newLoc`, line:`moveToPos`);
    SetVar<"ShiftAllAxes">(line:`c1`, line:`newLoc`, -1, -1, -1);
    SetVar<"ShiftAllAxes">(line:`c2`, line:`newLoc`, 1, -1, 1);
    PlayerAction<"DisplayBlock">(game:`%var(%default color)Powder`, line:`c1`, line:`c2`);
    SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
    PlayerAction<"PlayEntitySound">(Sound{Grindstone Use|p=1.5}, Sound{Respawn Anchor Charge|p=1.5}, '%selected');
    SelectObject<"Reset">();
    SetVar<"=">(game:`%var(ID).MovingCore`, 0);

--------------------------

Function<"AttemptCoreClick">()
    IfVar<"<">(game:`%var(ID).Energy`, 3)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>Not enough energy. (Needs <#cc66aa>3⚡</#cc66aa>)");
        Control<"Return">();
    }
    IfVar<"ListContains | NOT">(game:`%var(ID).%var(%default color)Cores`, '%var(tileX)|%var(tileZ)')
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>You must select a core first.");
        Control<"Return">();
    }
    SetVar<"GetValueIndex">(line:`coreIndex`, game:`%var(ID).%var(%default color)Cores`, '%var(tileX)|%var(tileZ)');
    IfVar<"=">(line:`coreIndex`, 0)
    {
        PlayerAction<"SendMessage">("<red>» Error!</red><gray> Could not find core.");
        Control<"Return">();
    }
    SetVar<"GetListValue">(line:`coreToMove`, game:`%var(ID).%var(%default color)Cores`, line:`coreIndex`);
    CallFunction<"GetCoreMoves">(line:`moves`, line:`coreToMove`, game:`%default color`);
    SetVar<"ListLength">(line:`numMoves`, line:`moves`);
    IfVar<"=">(line:`numMoves`, 0)
    {
        PlayerAction<"SendMessage">("<red>» Error! </red><gray>This core doesn't have any valid moves.");
        Control<"Return">();
    }
    SetVar<"=">(game:`%var(ID).MovingCore`, line:`coreIndex`);
    PlayerAction<"SendMessage">("<#cc66dd>» Moving Core! <gray>Choose a space to move it to.");
    PlayerAction<"SendMessage">("<#cc66dd>» To cancel, <gray>switch to a different item.");
    PlayerAction<"PlayEntitySound">('%selected', Sound{Bit|p=2});

--------------------------

Function<"CheckWin">()
    SetVar<"ListLength">(line:`redRemaining`, game:`%var(ID).RedCores`);
    SetVar<"ListLength">(line:`blueRemaining`, game:`%var(ID).BlueCores`);
    IfVar<"=">(line:`redRemaining`, 0)
    {
        SetVar<"=">(game:`%var(ID).Winner`, 'Blue');
    }
    IfVar<"=">(line:`blueRemaining`, 0)
    {
        SetVar<"=">(game:`%var(ID).Winner`, 'Red');
    }
    IfVar<"!=">(game:`%var(ID).Winner`, 0)
    {
        SetVar<"=">(game:`%var(ID).Status`, 'Win');
        SetVar<"=">(game:`%var(ID).LoopTick`, 0);
    }

--------------------------

Function<"RoomLoop4">()
    IfVar<"=">(game:`%var(ID).Status`, 'Win')
    {
        SetVar<"+=">(game:`%var(ID).LoopTick`);
        IfVar<"=">(game:`%var(ID).LoopTick`, 1)
        {
            SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
            PlayerAction<"ClearInv">();
            SelectObject<"Reset">();
        }
        IfVar<"=">(game:`%var(ID).LoopTick`, 60)
        {
            SetVar<"StyledText">(line:`mainTitle`, game:`%var(%var(ID).Winner)Color`, "%var(%var(ID).Winner) Wins!");
            SetVar<"StyledText">(line:`subtitle`, game:`%var(%var(ID).Winner)Color`, "%var(%var(ID).%var(%var(ID).Winner)Player) <gray>has won!");
            SelectObject<"PlayerName">(game:`%var(ID).RedPlayer`, game:`%var(ID).BluePlayer`);
            PlayerAction<"SendTitle">(line:`mainTitle`, line:`subtitle`, 60, 5, 15);
            PlayerAction<"PlayEntitySound">('%selected', Sound{Firework Launch});
            SelectObject<"Reset">();
            SetVar<"CreateList">(line:`fireworkLocs`, '0|0', '0|9', '9|0', '9|9');
            Repeat<"ForEach">(line:`tile`, line:`fireworkLocs`)
            {
                CallFunction<"TileToLocation">(line:`loc`, line:`tile`);
                SetVar<"ShiftOnAxis">(line:`loc`, 12)#Coordinate=Y;
                GameAction<"Firework">(line:`loc`, game:`%var(%var(ID).Winner)Firework`)#Instant=True;
            }
        }
        IfVar<"=">(game:`%var(ID).LoopTick`, 140)
        {
            CallFunction<"CloseRoom">(local:`ID`);
        }
    }

--------------------------

Process<"PlayerLoopH">()
    Repeat<"Forever">()
    {
        SetVar<"+=">(line:`i`);
        IfVar<"=">(line:`i`, 5)
        {
            SetVar<"=">(line:`i`, 0);
            StartProcess<"PlayerLoop">();
        }
        StartProcess<"FastPlayerLoop">()#LocalVariables=Share;
        Control<"Wait">();
    }

--------------------------

Process<"GameLoopH">()
    Repeat<"Forever">()
    {
        StartProcess<"GameLoop">()#TargetMode=WithNoTargets;
        Control<"Wait">();
    }

--------------------------

Process<"GameLoop">()
    SetVar<"=">(line:`i`, 0);
    Repeat<"ForEach">(line:`room`, game:`rooms`)
    {
        SetVar<"+=">(line:`i`);
        IfVar<"=">(line:`room`, 'full')
        {
            CallFunction<"RoomLoop">(line:`i`);
        }
    }

--------------------------

Process<"GoToSpawnUtil">()
    CallFunction<"GoToSpawn">();

--------------------------

Process<"PlayerLoop">()
    IfVar<"=">(game:`%default mode`, 'Spawn', 'Verification')
    {
        PlayerAction<"SetFoodLevel">(6);
        PlayerAction<"GivePotion">(Pot{Jump Boost -100 for ∞})#ShowIcon=False#EffectParticles=None;
        PlayerAction<"SetSpeed">(0);
        PlayerAction<"SetAllowFlight">()#AllowFlight=Disable;
    }
    IfVar<"=">(game:`%default mode`, 'Ingame')
    {
        CallFunction<"IngameLoop">();
    }

--------------------------

Process<"FastPlayerLoop">()
    PlayerAction<"SetTabListInfo">(GV(CPU Usage))#PlayerListField=Footer;
    IfVar<"=">(game:`%default mode`, 'Ingame')
    {
        SetVar<"=">(local:`ID`, game:`%default room`);
        SetVar<"Raycast">(local:`blockHit`, GV(Eye Location), 100);
        SetVar<"ShiftOnAxis">(line:`target`, local:`blockHit`, 0.1)#Coordinate=Y;
        PlayerAction<"ParticleLine">(line:`target`, local:`lastPointerLoc`, PFX{Dust|colorVariation=0|size=0.5|rgb=16777215|sizeVariation=0}, 0.2);
        SetVar<"=">(local:`lastPointerLoc`, line:`target`);
        PlayerAction<"Particle">(line:`target`, PFX{Dust|colorVariation=0|size=0.5|rgb=16777215|sizeVariation=0});
        CallFunction<"HeldItemLoop">();
    }

--------------------------

